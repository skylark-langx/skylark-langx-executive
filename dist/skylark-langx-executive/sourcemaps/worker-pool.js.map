{"version":3,"sources":["worker-pool.js"],"names":["define","WorkerTask","WorkerPool","file","size","this","workers","next","createWorkers","tasks","prototype","i","length","terminate","self","onmessage","event","uuid","data","undefined","Error","callback","worker","Worker","push","runTask","task","postMessage"],"mappings":";;;;;;;AAAAA,QACC,gBACC,SAASC,GACV,aAoBA,SAASC,EAAWC,EAAMC,GAQzBC,KAAKD,KAAOA,EAQZC,KAAKF,KAAOA,EAQZE,KAAKC,WAQLD,KAAKE,KAAO,EACZF,KAAKG,gBAQLH,KAAKI,SAuEN,OA/DAP,EAAWQ,UAAUF,cAAgB,WAEpC,IAAI,IAAIG,EAAI,EAAGA,EAAIN,KAAKC,QAAQM,OAAQD,IAEvCN,KAAKC,QAAQK,GAAGE,YAGjB,IAAIC,EAAOT,KAEX,SAASU,EAAUC,GAElB,IAAIC,EAAOD,EAAME,KAAKD,KAEtB,QAAwBE,IAArBL,EAAKL,MAAMQ,GAQb,MAAM,IAAIG,MAAM,uBAAyBH,GAN9BH,EAAKL,MAAMQ,GACjBI,SAASL,EAAME,KAAKA,aAClBJ,EAAKL,MAAMQ,GAQpBZ,KAAKC,WACLD,KAAKE,KAAO,EAEZ,IAAQI,EAAI,EAAGA,EAAIN,KAAKD,KAAMO,IAC9B,CACC,IAAIW,EAAS,IAAIC,OAAOlB,KAAKF,MAC7BmB,EAAOP,UAAYA,EACnBV,KAAKC,QAAQkB,KAAKF,KAWpBpB,EAAWQ,UAAUe,QAAU,SAASP,EAAMG,GAE7C,IAAIK,EAAO,IAAIzB,EAAWiB,EAAMG,GAChChB,KAAKI,MAAMiB,EAAKT,MAAQS,EAGxBrB,KAAKC,QAAQD,KAAKE,MAAMoB,aAEvBT,KAAMQ,EAAKR,KACXD,KAAMS,EAAKT,OAIZZ,KAAKE,OACFF,KAAKE,MAAQF,KAAKC,QAAQM,SAE5BP,KAAKE,KAAO,IAIPL","file":"../worker-pool.js","sourcesContent":["define([\n\t\"./WorkerTask\"\n],function(WorkerTask){\n\t\"use strict\";\n\n\t/**\n\t * Worker pool is used to manage and execute mutiple task of the same type using a predefined number of workers.\n\t *\n\t * Workers are pre initialized to avoid the overhead of creation during execution.\n\t *\n\t * These workers receive messages with a uuid of the task and the data to be processed.\n\t *\n\t * {\n\t *   uuid: <Task UUID>,\n\t *   data: <Data object>\n\t * }\n\t *\n\t * The worker should respond with a message using the same structure.\n\t *\n\t * @class WorkerPool\n\t * @param {String} file Worker JS file path.\n\t * @param {Number} size Number of workers to be created for this pool.\n\t */\n\tfunction WorkerPool(file, size)\n\t{\n\t\t/**\n\t\t * Size of this worker pool.\n\t\t *\n\t\t * @attribute size\n\t\t * @type {Number}\n\t\t */\n\t\tthis.size = size;\n\n\t\t/**\n\t\t * Javascript file for the workers.\n\t\t * \n\t\t * @attribute file\n\t\t * @type {String}\n\t\t */\n\t\tthis.file = file;\n\n\t\t/**\n\t\t * List of worker of this pool.\n\t\t *\n\t\t * @attribute workers\n\t\t * @type {Array}\n\t\t */\n\t\tthis.workers = [];\n\n\t\t/**\n\t\t * Worker index to be used for the next task.\n\t\t *\n\t\t * @attribute next\n\t\t * @type {Number}\n\t\t */\n\t\tthis.next = 0;\n\t\tthis.createWorkers();\n\n\t\t/**\n\t\t * Tasks waiting to be processed.\n\t\t *\n\t\t * @attribute tasks\n\t\t * @type {Array}\n\t\t */\n\t\tthis.tasks = {};\n\t}\n\n\t/**\n\t * Create workers for this pool.\n\t * \n\t * @method createWorkers\n\t */\n\tWorkerPool.prototype.createWorkers = function()\n\t{\n\t\tfor(var i = 0; i < this.workers.length; i++)\n\t\t{\n\t\t\tthis.workers[i].terminate();\n\t\t}\n\n\t\tvar self = this;\n\n\t\tfunction onmessage(event)\n\t\t{\n\t\t\tvar uuid = event.data.uuid;\n\n\t\t\tif(self.tasks[uuid] !== undefined)\n\t\t\t{\n\t\t\t\tvar task = self.tasks[uuid];\n\t\t\t\ttask.callback(event.data.data);\n\t\t\t\tdelete self.tasks[uuid];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new Error(\"Unknown worker task \" + uuid);\n\t\t\t}\n\t\t}\n\n\t\tthis.workers = [];\n\t\tthis.next = 0;\n\n\t\tfor(var i = 0; i < this.size; i++)\n\t\t{\n\t\t\tvar worker = new Worker(this.file);\n\t\t\tworker.onmessage = onmessage;\n\t\t\tthis.workers.push(worker);\n\t\t}\n\t};\n\n\t/**\n\t * Create task to be executed in this pool.\n\t *\n\t * @method runTask\n\t * @param {Object} data Data to be sent to the worker.\n\t * @param {Function} callback Function to be called by the worker after processing the data sent. \n\t */\n\tWorkerPool.prototype.runTask = function(data, callback)\n\t{\n\t\tvar task = new WorkerTask(data, callback);\n\t\tthis.tasks[task.uuid] = task;\n\n\t\t//Post task to worker\n\t\tthis.workers[this.next].postMessage(\n\t\t{\n\t\t\tdata: task.data,\n\t\t\tuuid: task.uuid\n\t\t});\n\n\t\t//Update worker pointer\n\t\tthis.next++;\n\t\tif(this.next >= this.workers.length)\n\t\t{\n\t\t\tthis.next = 0;\n\t\t}\n\t};\n\n\treturn WorkerPool;\n\n});\n"]}